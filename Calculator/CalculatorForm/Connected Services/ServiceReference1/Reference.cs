//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CalculatorForm.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.calcSoap")]
    public interface calcSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/add", ReplyAction="*")]
        int add(int a, int b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/add", ReplyAction="*")]
        System.Threading.Tasks.Task<int> addAsync(int a, int b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/sub", ReplyAction="*")]
        int sub(int a, int b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/sub", ReplyAction="*")]
        System.Threading.Tasks.Task<int> subAsync(int a, int b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/multiply", ReplyAction="*")]
        int multiply(int a, int b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/multiply", ReplyAction="*")]
        System.Threading.Tasks.Task<int> multiplyAsync(int a, int b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/divide", ReplyAction="*")]
        float divide(int a, int b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/divide", ReplyAction="*")]
        System.Threading.Tasks.Task<float> divideAsync(int a, int b);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface calcSoapChannel : CalculatorForm.ServiceReference1.calcSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class calcSoapClient : System.ServiceModel.ClientBase<CalculatorForm.ServiceReference1.calcSoap>, CalculatorForm.ServiceReference1.calcSoap {
        
        public calcSoapClient() {
        }
        
        public calcSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public calcSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public calcSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public calcSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int add(int a, int b) {
            return base.Channel.add(a, b);
        }
        
        public System.Threading.Tasks.Task<int> addAsync(int a, int b) {
            return base.Channel.addAsync(a, b);
        }
        
        public int sub(int a, int b) {
            return base.Channel.sub(a, b);
        }
        
        public System.Threading.Tasks.Task<int> subAsync(int a, int b) {
            return base.Channel.subAsync(a, b);
        }
        
        public int multiply(int a, int b) {
            return base.Channel.multiply(a, b);
        }
        
        public System.Threading.Tasks.Task<int> multiplyAsync(int a, int b) {
            return base.Channel.multiplyAsync(a, b);
        }
        
        public float divide(int a, int b) {
            return base.Channel.divide(a, b);
        }
        
        public System.Threading.Tasks.Task<float> divideAsync(int a, int b) {
            return base.Channel.divideAsync(a, b);
        }
    }
}
